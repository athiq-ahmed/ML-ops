import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.feature_extraction import DictVectorizer
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error

df['duration'] = df.lpep_dropoff_date - df.lpep_picup_date
td = df.duration.iloc[0]
td.total_seconds() / 60
df.duration = df.duration.apply(lambda td: td.total_seconds() / 60)
#df[df.trip_type == 2]

sns.distplot(df.duration)
df.duration.describe()
df.duration.describe(percentiles=[0.95, 0.98, 0.99])
((df.duration >=1) & (df.duration <=60)).mean()

df = df[(df.duration >=1) & (df.duration <=60)]

categorical = ['PULocationID', 'DOLocationID']
numerical = ['trip_distance']

df['categorical'].dtypes
df['categorical'].astype(str).dtypes
df['categorical'] = df['categorical'].astype(str)

df[categorical + numerical].iloc[:10].to_dict(orient='records')
train_dicts = df[categorical + numerical].to_dict(orient='records')

dv - DictVectorizer()
X_train = dv.fit_transform(train_dicts)
X_train
dv.feature_names_

target = 'duration'
y_train = df[target].values
y_train

lr = LinearRegression()
lr.fit(X_train, y_train)

y_pred = lr.predict(X_train)

sns.distplot(y_pred, label='prediction')
sns.distplot(y_train, label='actual')
plt.legend()

mean_squared_error(y_train, y_pred, squared=False) # root mean square error; 9 minutes, our model is wrong by average by 9 minutes

